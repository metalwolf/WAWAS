<?php

// ========================================================
// CLASE PRINCIPAL DEL SERVIDOR
// ========================================================

namespace server;

class Server
{
  const VERSION = '1.0.7';
  
  // main system configuration
  private $config;
  
  // Indicador de solicitud de parar el servidor
  private $shutdown = false;

  // All the known modules (system wide)
  private $serverthreads = array();
  private $modules;
  private $protocols = array();
  private $listeners = array();
  
  // Dynamic Local clientes on creation
  private $clients = array();

  public function __construct($config) 
  {
    $this->config = $config;
    
    // Step 3.1, Parse the full config file with protocols and modules already loaded
    // since every protocol and module may have specific config entries that have to be parsed too

    // 1. We build the modules (system wide)
    $this->modules = new \Volatile();
    $modules = $config->getEntry('modules/module');
    if (!$modules)
      throw new \Error("Error: there is no modules to run on the server. Please check your config file.");
    foreach($modules as $module)
    {
      $modulename = "\\modules\\".$module['lib'];
      $this->modules[$module['name']] = new $modulename($module);
    }
    
    // Listeners
    $listeners = $config->getEntry('listeners/listener');
    if (!$listeners)
      throw new \Error("Error: there is no listeners on the server.");
    // we parse the default listener
    $listenerdefault = $config->getEntry('listeners/default');
    // We parse all other listeners
    foreach($listeners as $listener)
    {
      $this->addListener($listener, $listenerdefault);
    }

    // we create protocols
    $protocols = $config->getEntry('protocols/protocol');
    if (!$protocols)
      throw new \Error("Error: there is no protocol to listen to. Please check your config file.");

    foreach($protocols as $protocol)
    {
      $protoname = "\\protocols\\".$protocol['lib'];
      $this->protocols[$protocol['name']] = new $protoname($protocol, $config, $this->listeners);
    }
    
    foreach($this->listeners as $k => $listener)
    {
      if ($listener->tlsstream)
      {
        $server = new ServerThread($this->config, $this->modules, $this->protocols, $listener, $listener->socket);
        $server->start();
        $this->serverthreads[] = $server;
        unset($this->listeners[$k]);
      }
    }
    
  }

  public function addListener($lconfig, $default)
  {
    $listener = new Listener($lconfig, $default);
    $listener->start();
    $this->listeners[(string)$listener->socket] = $listener;
  }

  public function stopListeners()
  {
    foreach($this->listeners as $listener)
      $listener->stop();
  }

  public function addClient($socket, $modules, $protocol, $listener)
  {
    $client = new Client($socket, $modules, $protocol, $listener);
    $client->start();
    // guarda en memoria el cliente (thread)
    $this->clients[(string)$socket] = $client;
  }

  public function getReaders()
  {
    // For each listener:
    $readers = array();
    foreach($this->listeners as $listener)
    {
      $readers[] = $listener->socket;
    }
    return $readers;
  }
  
  // ========================================================
  // FUNCION PRINCIPAL
  // ========================================================
  public function run()
  {
    $maincounter = 0;
    
    /* init hooks: */
    foreach($this->modules as $module) $module->init($this->modules, $this->protocols, $this->listeners);
    
    // El ciclo es "infinito" hasta recibir una señal para matar el proceso
    while (true)
    {
      // permitimos a las señales pasar por el sistema e interpretarlas.
      pcntl_signal_dispatch();

      if (!$this->shutdown)
      {
        // Si pedimos un shutdown, solamente ignoramos las nuevas entradas mientras terminamos los socekts actuales. Estamos en proceso de desconectar todo.
        // Vamos a leer todo lo que puede entrar en nuestro servidor en un solo lugar.
        // Creamos un array de todos los sockets abiertos ( listeners y clientes juntos)
        $readers = $this->getReaders();
        $_wr = null;
        $_ex = null;
        
/***********************************
// stream try, not working (see explanation in listener.lib)
        // Solicitamos el estatus general de todos los sockets, 1 sec timeout
        foreach($readers as $mastersocket)
        {
          // we cant wait for every socket or block others, no timeout
          while ($socket = @stream_socket_accept($mastersocket,0))
          {
            print "Client added $socket on $mastersocket \n";
            $this->addClient($socket, $this->modules, $this->protocols[$this->listeners[(string)$mastersocket]->protocol], $this->listeners[(string)$mastersocket]);

          }
        }
*/

        $numsockets = @socket_select($readers, $_wr, $_ex, 1, 0);
        if ($numsockets === false)
        { // es un error grave. Por el momento no captamos este error, solo cerramos todo y notificamos
          // CTRL C pasa por aqui
          $err = socket_last_error();
          if ($err != 4)  // 4 = CTRL C (interruption system call), be silent pls !
          {
            print 'Error grave general de la aplicación'."\n";
            print 'Error on socket: '.$err. ' ' . socket_strerror($err) . "\n";
            // Throw error
            break;
          }
        }

        if ($numsockets > 0)
        {
          foreach ($readers as $reader)
          {
            // Maybe a listener have received something
            if (isset($this->listeners[(string)$reader]))
            {
              // We just received some new connection on the listener. Listen for the new sockets
              while ( ( $socket = @socket_accept($reader) ) !== false)
              {
// We are subject to the maxconnections parameter (server/listener). If we pass the quantity of clients, we should "wait" ? "close" ? (we cannot send an error: no protocol recognized)
                // start a thread to listen to this socket
                $this->addClient($socket, $this->modules, $this->protocols[$this->listeners[(string)$reader]->protocol], $this->listeners[(string)$reader]);
              }
              // Reader siguiente
              continue;
            }
          }
        }
        unset($readers);
      }

      // limpia los threads del pooler
      foreach($this->clients as $k => $client)
      {
        if ($client->isTerminated())
        {
          // notificar crashed thread id
          $id = $client->getThreadId();
          
          print "Client crashed: " . $k . ' - ' . $id . "\n";
//          fclose($client->getSocket());
//          socket_shutdown($client->getSocket(), 2);
          socket_close($client->getSocket());
          unset($this->clients[$k]);
        }
        else if ($client->hasRunned())
        {
//          fclose($client->getSocket());
//          socket_shutdown($client->getSocket(), 2);
          socket_close($client->getSocket());
          unset($this->clients[$k]);
        }
      }
      
      $maincounter++;
      /* yet another loop: */
      foreach($this->modules as $module) $module->loop($maincounter);

//      if ($maincounter % 500 == 0)
//        print "Clients #: ".sizeof($this->clients) . " - " . (memory_get_usage()/1000000) . "MB\n";

      // shutdown limpio, terminamos de servir los clientes
      if ($this->shutdown && sizeof($this->clients) == 0)
      {
        break;
      }
    }

    /* shutdown hooks: */
    foreach($this->modules as $module) $module->shutdown();
  }
  
  public function shutdown()
  {
    $this->shutdown = true;
    foreach($this->serverthreads as $k => $server)
      $server->shutdown();
    foreach($this->clients as $k => $client)
      $client->shutdown();
    print "SHUTDOWN EN CURSO...\n";
    // Cerramos todo
    $this->stopListeners();
  }

}

?>