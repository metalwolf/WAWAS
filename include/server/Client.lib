<?php

namespace server;

// ========================================================
// CLASE PRINCIPAL DE UN CLIENTE CONECTADO
// ========================================================

class Client extends \Thread
{
  private $socket;

  private $modules;
  private $protocol;
  private $listener;
  
  private $hasrunned = false;

  public function __construct($socket, $modules, $protocol, $listener)
  {
    $this->socket = $socket;

    $this->modules = $modules;
    $this->protocol = $protocol;
    $this->listener = $listener;
  }
    
  public function getSocket()
  {
    return $this->socket;
  }
  
  public function hasRunned()
  {
    return $this->hasrunned;
  }
  
  public function run()
  {
    // Prepara el thread
    spl_autoload_register('autoload');

    // creamos el contexto que necesitamos para el protocol localmente
    $context = $this->protocol->createContext();
    $context->threadid = $this->getThreadId();
    $context->modules = $this->modules;
    $context->listener = $this->listener;
    $context->protocol = $this->protocol;
    $context->start = microtime(true);
    $context->lastaccesstime = microtime(true);
    $context->hits = 0;
    $context->close = false;
    $ip = $port = null;
    $peer = @socket_getpeername($this->socket, $ip, $port);

    $mainloop = true;
    if (!$peer)
    {
      $context->close = true;
      $mainloop = false; // we quit the loop even before starting: the client has disconnect even before full connection
    }
    else
    {
      $context->REMOTE_ADDR = $ip;
      $context->REMOTE_PORT = $port;
      
      /* start hooks: */
      foreach($this->modules as $module) $module->start($context);
    }

    
    // ********
    // aqui deberiamos de calcular el HOST remote, si esta anclado en módulo

    // el run se vuelve el loop prinipal del collectable
    // Salimos cuando se desconecta el cliente (o nos forzamos a desconectar)
    // El ciclo es "infinito" hasta recibir una señal para matar el proceso
    while ($mainloop)
    {
      // esperamos 1000 microsegundos.
      $this->synchronized(function($thread) { $thread->wait(1000); }, $this);
      
      $readers = array($this->socket);
      $_wr = null;
      $_ex = null;

      // Solicitamos el estatus general de todos los sockets
      // 1 sec timeout to spare PHP time which is costy
      $numsockets = socket_select($readers, $_wr, $_ex, 1, 0);
      
      if ($numsockets === false)
      { // es un error grave. Por el momento no captamos este error, solo cerramos todo y notificamos
        print 'Error grave general de la aplicación en cliente'."\n";
        $err = socket_last_error();
        print 'Error on socket: '.$err. ' ' . socket_strerror($err) . "\n";
        break;
      }

      // Si no hay nada nuevo, nada que hacer
      if ($numsockets === 0)
      {
        // protocol timeouts
        if ($context->lastaccesstime < microtime(true) - $context->timeout)
        {
          // We got a timeout, close the socket and the thread
          break;
        }
        else
          continue;
      }

      foreach ($readers as $reader)
      {
        // solo hay un reader possible, en modo lectura, no aceptamos sockets nuevos aqui
        
        // leemos nuestro buffer en modo binario
        $input = @socket_read($reader, $this->listener->bufferlength);
        // 4 = Interrupted system call
        // En este caso el sistema se va a cerrar automaticamente
        if ($input === false && socket_last_error() != 4)
        {
          // the socket likely had an error and must be closed
          // we should log this !
// *****

// rompemos todo, error 
          break 2;
        }

        if ($input === '')
        {
          // Zero length string means disconnected by client
          // so we destroy the client listener.
          break 2;
        }
        
        $context->lastaccesstime = microtime(true);
        $context->state = 1;
        foreach($this->modules as $module) $module->receivedata($context, $input);
        $data = $this->protocol->process($context, $input);

        // regresamos al cliente lo procesado
// *****************************************************        
//***** SOPORTE PARA LOS CHUNKS HTTP 1.1!!!!!!!!!!!!!!!        
// *****************************************************        
// *****************************************************        
// *****************************************************        
        
        if ($data)
        {
          foreach($this->modules as $module) $module->senddata($context, $data);

          $len = strlen($data);
          while ($len > 0)
          {
            $writen = @socket_write($this->socket, $data, $len);
            if ($writen === false)
              break 3; // socket error, we break anything
            if ($writen == $len)
              break; // ready, all writen
            $data = substr($data, $writen);
            $len -= $writen;
            // esperamos 1000 microsegundos. No seamos greedy, network is not that fast after all
            $this->synchronized(function($thread) { $thread->wait(1000); }, $this);
          }
        }
        
        // tenemos que cerrar este socket ?
        if ($context->close)
          break 2;
      }
    }
    $this->hasrunned = true;
    
    /* start hooks: */
    $context->stop = microtime(true);
    foreach($this->modules as $module) $module->stop($context);
  }
}

?>